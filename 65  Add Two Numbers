2. Add Two Numbers
Solved
Medium
Topics
Companies
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
    //     ListNode* ptr1=l1,*ptr2=l2;
    //     ListNode* ans=new ListNode(0);
    //     ListNode* ptrans=ans;
    //         int sum=0;
    //     int carry=0;
    //     while(ptr1!=nullptr && ptr2!=nullptr){
    //         sum=ptr1->val + ptr2->val+carry;
    //         if(sum<=9){
    //              carry=0;
    //             ptrans->next=new ListNode(sum);  
               
    //         }else{

    //             carry=1;
    //             sum=sum%10;
    //             ptrans->next=new ListNode(sum);  
    //         }

    //          ptrans=ptrans->next;
    //          ptr1=ptr1->next;
    //          ptr2=ptr2->next;
    //     }


    //     if(ptr1!=nullptr){
    //         while(ptr1!=nullptr){
    //        sum=ptr1->val +carry;
    //         if(sum<=9){
    //              carry=0;
    //             ptrans->next=new ListNode(sum);  
               
    //         }else{

    //             carry=1;
    //             sum=sum%10;
    //             ptrans->next=new ListNode(sum);  
    //         }
    //         ptr1=ptr1->next;
    //          ptrans=ptrans->next;
            
    //     }
    //     }

    //      if(ptr2!=nullptr){
    //         while(ptr2!=nullptr){
    //        sum=ptr2->val +carry;
    //         if(sum<=9){
    //              carry=0;
    //             ptrans->next=new ListNode(sum);  
               
    //         }else{

    //             carry=1;
    //             sum=sum%10;
    //             ptrans->next=new ListNode(sum);  
    //         }
    //         ptr2=ptr2->next;
    //          ptrans=ptrans->next;
    //     }
    //      }

    //      if(carry!=0){
    //         ptrans->next=new ListNode(1);
    //      }



    //     return ans->next;
    // }


better method to solve same ques
   
    ListNode* ans=new ListNode(0);
     ListNode*first=l1,*second=l2,*ptrans=ans;
    
    int sum=0,carry=0;
    while(first!=nullptr || second!=nullptr){
        if(first){
            sum=sum+first->val;
        }

        if(second){
            sum=sum+second->val;
        }

        if(carry==1){
            sum=sum+carry;
        }

        if(sum<=9){
            carry=0;
            ptrans->next=new ListNode(sum);
            ptrans=ptrans->next;
            sum=0;

        }
        else{
            carry=1;
            sum=sum%10;
            ptrans->next=new ListNode(sum);
            ptrans=ptrans->next;
            sum=0;
        }

        if(first){
            first=first->next;
        }

        if(second){
            second=second->next;
        }

    }

    if(carry){
        ptrans->next=new ListNode(1);
    }

    return ans->next;


}
};
