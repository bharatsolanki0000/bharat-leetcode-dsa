85. Maximal Rectangle
Solved
Hard
Topics
Companies
Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.
Example 2:

Input: matrix = [["0"]]
Output: 0
Example 3:

Input: matrix = [["1"]]
Output: 1
 

Constraints:

rows == matrix.length
cols == matrix[i].length
1 <= row, cols <= 200
matrix[i][j] is '0' or '1'.

class Solution {
    private:
    int checkarea(vector<int>temp,int rownum,vector<int> &total){
       int size=temp.size();

      // for(int i=0;i<size;i++){

            if(rownum==0){
                total=temp;
            }
            else{
                for(int i=0;i<size;i++){
                    if(temp[i]==1){
                    temp[i]=total[i]+temp[i];
                    }
                    else{
                        temp[i]=0;
                    }
                }
            }
            // levels mil gye
            //using  max rec in histogram for temp array
        stack<int>st;
      
       vector<int> prevsmaller(size,0);
       vector<int> nextsmaller(size,0); 

       // next or right or end smaller index

       st.push(-1);
       for(int i=size-1;i>=0;i--){
        while( st.top()!=-1 && temp[st.top()] >=temp[i] ){
            st.pop();
        }
        nextsmaller[i]=st.top();
        st.push(i);
       }
       // got next smaller

        stack<int> ct;

        // prev or left or start smaller index
         ct.push(-1);
       for(int i=0;i<size;i++){
        while(ct.top()!=-1 && temp[ct.top()] >=temp[i] ){
            ct.pop();
        }
        prevsmaller[i]=ct.top();
        ct.push(i);
       }

       //got prev smaller


       int oldarea=INT_MIN;
       for(int i=0;i<size;i++){
        // area=height * width
        int length=temp[i];

        if(nextsmaller[i]==-1){
            nextsmaller[i]=size;
        }
        int width=nextsmaller[i]-prevsmaller[i]-1;
        
        int newarea=length*width;

      if(oldarea<=newarea){
        oldarea=newarea;
       }
       }
       total=temp;
       return oldarea;

        //}
       
    }
    
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int rowsize=matrix.size();
        int colsize=matrix[0].size();
        vector<int> total(colsize);
        int maxi=0;
        int rownum=-1;
        for(int row=0;row<rowsize;row++){
            vector<int> temp(colsize);
            int index=0;
            for(int col=0;col<colsize;col++){
              
                int num=matrix[row][col]-'0';
                temp[index++]=num;
            }
              rownum++;

            // array temp
          int temparea=checkarea(temp,rownum,total);
          if(temparea >=maxi){
            maxi=temparea;
          }

        }

       
       return maxi;
       
    }
};

