61. Rotate List
medium
Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109

class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }

        // count nodes
        ListNode* temp = head;
        int count = 0;
        while (temp != nullptr) {
            count++;
            temp = temp->next;
        }

        k = k % count;
        int i = 0;

        while (i < k) {
            ListNode* ptr = head;

            while (ptr->next->next != nullptr) {
                ptr = ptr->next;
            }
            ptr->next->next = head;
            head = ptr->next;
            ptr->next = nullptr;
            i++;
        }

        return head;
    }
};
