23. Merge k Sorted Lists
Solved
Hard
Topics
Companies
You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
Example 2:

Input: lists = []
Output: []
Example 3:

Input: lists = [[]]
Output: []
 

Constraints:

k == lists.length
0 <= k <= 10^4
0 <= lists[i].length <= 500
-10^4 <= lists[i][j] <= 10^4
lists[i] is sorted in ascending order.
The sum of lists[i].length will not exceed 10^4.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    private:
        void merg(ListNode* list1, ListNode* list2, vector<ListNode*> &lists){
            ListNode*l1=list1,*l2=list2;
            ListNode* final=new ListNode();
            ListNode* finalptr=final;
            while(l1!=nullptr && l2!=nullptr){
                if(l1->val <= l2->val){
                    finalptr->next=l1;
                    l1=l1->next;
                }else{
                      finalptr->next=l2;
                    l2=l2->next;
                }
                finalptr=finalptr->next;
            }
            if(l1!=nullptr){
            while(l1!=nullptr){
                  finalptr->next=l1;
                l1=l1->next;
                finalptr=finalptr->next;
            }
            }
            if(l2!=nullptr){
             while(l2!=nullptr){
                 finalptr->next=l2;
                l2=l2->next;
                 finalptr=finalptr->next;
            }
            }
            lists[0]=final->next;
        }

public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int i=0;

        if(lists.size()==0){
            return nullptr;
        }

        if(lists.size()==1){
            return lists[0];
        }

        for(int i=0;i<lists.size()-1;i++){
            merg(lists[0],lists[i+1],lists);
        }

        return lists[0];


        

      


    }
};
