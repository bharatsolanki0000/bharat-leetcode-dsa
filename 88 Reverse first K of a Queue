Reverse first K of a Queue
Difficulty: EasyAccuracy: 81.28%Submissions: 141K+Points: 2
Given an integer k and a queue of integers, we need to reverse the order of the first k elements of the queue, leaving the other elements in the same relative order.

Only following standard operations are allowed on queue.

enqueue(x) : Add an item x to rear of queue
dequeue() : Remove an item from front of queue
size() : Returns number of elements in queue.
front() : Finds front item.
Note: The above operations represent the general processings. In-built functions of the respective languages can be used to solve the problem.

Examples:

Input: q = [1, 2, 3, 4, 5], k = 3
Output: [3, 2, 1, 4, 5]
Explanation: After reversing the first 3 elements from the given queue the resultant queue will be 3 2 1 4 5
Input: q = [4, 3, 2, 1], k = 4
Output: [1, 2, 3, 4] 
Explanation: After reversing the first 4 elements from the given queue the resultant queue will be 1 2 3 4 
Constraints:
1<=q[i]<=105
1<=q.size()<=105
1<=k<=105



class Solution {
  public:
    queue<int> reverseFirstK(queue<int> q, int k) {
        if(k> q.size()){
            return q;
        }
        // code here
        int element;
        stack<int> st;
        for(int i=0;i<k;i++){
            element=q.front();
            q.pop();
            st.push(element);
        }
        
        while(!st.empty()){
            element=st.top();
            st.pop();
            q.push(element);
        }
        
        int leftsize=q.size()-k;
        for(int i=0;i<leftsize;i++){
            element=q.front();
            q.pop();
            q.push(element);
        }
        return q;
    }
};


