1886. Determine Whether Matrix Can Be Obtained By Rotation
Easy problem

Example 1:
Input: mat = [[0,1],[1,0]], target = [[1,0],[0,1]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise to make mat equal target.

Example 2:
Input: mat = [[0,1],[1,1]], target = [[1,0],[0,1]]
Output: false
Explanation: It is impossible to make mat equal to target by rotating mat.

Example 3:
Input: mat = [[0,0,0],[0,1,0],[1,1,1]], target = [[1,1,1],[0,1,0],[0,0,0]]
Output: true
Explanation: We can rotate mat 90 degrees clockwise two times to make mat equal target.

class Solution {
public:
    bool findRotation(vector<vector<int>>& mat, vector<vector<int>>& target) {

        for (int rot = 0; rot < 4; rot++) {
            int n = mat.size();
            int row = 0;
            int col = 0;
            int count = 0;

            if (mat == target) {
                return true;
            }
            for (int i = row; i < n; i++) {
                for (int j = col; j < n; j++) {
                    swap(mat[i][j], mat[j][i]);
                }
                row++;
                col++;
            }

            int firstcol = 0;
            int lastcol = n - 1;
            while (firstcol < lastcol) {
                for (int i = 0; i < n; i++) {
                    swap(mat[i][firstcol], mat[i][lastcol]);
                }
                firstcol++;
                lastcol--;
            }
        }

        return false;
    }
};
