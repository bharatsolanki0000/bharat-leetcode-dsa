92. Reverse Linked List II
medium
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {

public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        // left==right
        if (left == right) {
            return head;
        }

        int totalnodes = 1;
        ListNode* l = head;
        while (l->next != nullptr) {
            totalnodes++;
            l = l->next;
        }

        // full list
        if (left == 1 && right == totalnodes) {
            l = head;
            ListNode* back = nullptr;
            while (l != nullptr) {
                ListNode* front = l->next;
                l->next = back;
                back = l;
                l = front;
            }
            return back;
        }

        ListNode* prevl;
        int count = 1;
        if (left != 1) {
            l = head;

            while (count < left) {
                prevl = l;
                l = l->next;
                count++;
            }

        } else {

            l = head;
        }

        ListNode* r = l;

        // while(count < right){

        //     r=r->next;
        //     count++;
        // }

        while (count < right) {
            count++;
            r = r->next;
        }

        // l and r is set
        ListNode* nextr = r->next;
        r->next = nullptr;

        if (left != 1) {
            prevl->next = nullptr;
        }

        ListNode* back = nullptr;
        while (l != nullptr) {
            ListNode* front = l->next;
            l->next = back;
            back = l;
            l = front;
        }

        if (left != 1) {
            prevl->next = back;
        } else {
            prevl = back;
        }

        while (prevl->next != nullptr) {
            prevl = prevl->next;
        }
        prevl->next = nextr;
        // return head;

        if (left == 1) {
            return back;
        }
        return head;
    }
};
