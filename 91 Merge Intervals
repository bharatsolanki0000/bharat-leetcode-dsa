56. Merge Intervals
Solved
Medium
Topics
Companies
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        // sort(intervals.begin(),intervals.end());
        // int size=intervals.size();
        // int i=0;
        // int j=1;
        // vector<vector<int>> ans;
        // ans.push_back({intervals[0][0],intervals[0][1]});
        // if(size==1){
        //     return ans;
        // }
        

        // while(i<j && j < size){
        //     int start=min(ans[i][0],intervals[j][0]);
        //     int end=max(ans[i][1],intervals[j][1]);

        //     if(ans[i][1] >=intervals[j][0]){
        //         ans.erase(ans.begin()+i);
        //         ans.push_back({start,end});
        //         j++;
                
        //     }
        //     else{
        //         ans.push_back({intervals[j][0],intervals[j][1]});
        //         i++;
        //         j++;
        //     }
        // }
        // return ans;

        sort(intervals.begin(),intervals.end());
        vector<vector<int>> ans;

        for(int i=0;i<intervals.size();i++){
            if(ans.empty() || ans.back()[1]<intervals[i][0]){
                ans.push_back(intervals[i]);
            }else{
                ans.back()[1]=max(intervals[i][1],ans.back()[1]);
            }
        }
        return ans;
        
    }
};
